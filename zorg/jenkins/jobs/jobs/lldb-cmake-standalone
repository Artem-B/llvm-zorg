#!/usr/bin/env groovy
pipeline {
    agent {label 'green-dragon-23'}
    parameters {
        string(name: 'GIT_SHA', defaultValue: '*/main', description: 'Git revision to build')
        string(name: 'ARTIFACT', defaultValue: 'clang-stage2-Rthinlto/latest', description: 'Compiler artifact to use for building the project')
        string(name: 'BUILD_TYPE', defaultValue: 'Release', description: 'Default CMake build type; one of: Release, Debug, ...')
        string(name: 'CLEAN', defaultValue: "false", description: 'Whether or not to clean the build directory before building')
    }
    stages {
        stage('Checkout') {
            steps {
                timeout(30) {
                    dir('llvm-project') {
                        checkout([$class: 'GitSCM', branches: [
                            [name: params.GIT_SHA]
                        ], userRemoteConfigs: [
                            [url: 'https://github.com/llvm/llvm-project.git']
                        ], extensions: [
                            [$class: 'CloneOption',
                            reference: '/Users/Shared/llvm-project.git',
                            noTags: true, timeout: 30]
                        ]])
                    }
                    dir('llvm-zorg') {
                        checkout([$class: 'GitSCM', branches: [
                            [name: '*/main']
                        ], userRemoteConfigs: [
                            [url: 'https://github.com/llvm/llvm-zorg.git']
                        ], extensions: [
                            [$class: 'CloneOption',
                            reference: '/Users/Shared/llvm-zorg.git']
                        ]])
                    }
                }
            }
        }
        stage('Fetch') {
            steps {
              timeout(90) {
                  sh '''
                  # The relay job sets ARTIFACT to the last good LLDB build.
                  # Here we use it to download the last good Clang.
                  export ARTIFACT=clang-stage2-Rthinlto/latest
                  python3 llvm-zorg/zorg/jenkins/monorepo_build.py fetch

                  echo "Skipping geting the just-built compiler to work around an issue with libcxx."
                  rm -rf host-compiler
                  '''
                }
            }
        }
        stage('Clang Build') {
            steps {
                timeout(90) {
                    sh '''
                    set -u
                    rm -rf build.properties

                    cd llvm-project
                    git tag -a -m "First Commit" first_commit 97724f18c79c7cc81ced24239eb5e883bf1398ef || true

                    git_desc=$(git describe --match "first_commit")

                    export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")

                    sha=$(echo ${git_desc} | cut -f 3 -d "-")
                    export GIT_SHA=${sha:1}

                    cd -

                    export PATH=$PATH:/usr/bin:/usr/local/bin

                    python3 llvm-zorg/zorg/jenkins/monorepo_build.py cmake build \
                      --assertions \
                      --noupload \
                      --projects="clang" \
                      --runtimes="libcxx;libcxxabi;libunwind" \
                      --cmake-flag="-DLLVM_INSTALL_UTILS=On" \
                      --cmake-flag="-DLLVM_INSTALL_TOOLCHAIN_ONLY=Off" \
                      --cmake-flag="-DLLVM_TARGETS_TO_BUILD=X86"
                    '''
                }
            }
        }
        stage('Ninja Standalone Build (build tree)') {
            steps {
                timeout(90) {
                    sh '''
                    set -u
                    rm -rf build.properties

                    cd llvm-project
                    git tag -a -m "First Commit" first_commit 97724f18c79c7cc81ced24239eb5e883bf1398ef || true

                    git_desc=$(git describe --match "first_commit")

                    export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")

                    sha=$(echo ${git_desc} | cut -f 3 -d "-")
                    export GIT_SHA=${sha:1}

                    cd -

                    export PATH=$PATH:/usr/bin:/usr/local/bin
                    export LLDB_STANDALONE_TYPE="build-tree"

                    python3 $WORKSPACE/llvm-zorg/zorg/jenkins/monorepo_build.py lldb-cmake-standalone build \
                      --assertions \
                      --cmake-type=Release
                    '''
                }
            }
        }
        stage('Ninja Standalone Build (install tree)') {
            steps {
                timeout(90) {
                    sh '''
                    set -u
                    rm -rf build.properties

                    cd llvm-project
                    git tag -a -m "First Commit" first_commit 97724f18c79c7cc81ced24239eb5e883bf1398ef || true

                    git_desc=$(git describe --match "first_commit")

                    export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")

                    sha=$(echo ${git_desc} | cut -f 3 -d "-")
                    export GIT_SHA=${sha:1}

                    cd -

                    export PATH=$PATH:/usr/bin:/usr/local/bin
                    export LLDB_STANDALONE_TYPE="install-tree"

                    python3 $WORKSPACE/llvm-zorg/zorg/jenkins/monorepo_build.py lldb-cmake-standalone build \
                      --assertions \
                      --cmake-type=Release
                    '''
                }
            }
        }
        stage('Xcode Standalone Build (build tree)') {
            steps {
                timeout(90) {
                    sh '''
                    set -u
                    rm -rf build.properties

                    cd llvm-project
                    git tag -a -m "First Commit" first_commit 97724f18c79c7cc81ced24239eb5e883bf1398ef || true

                    git_desc=$(git describe --match "first_commit")

                    export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")

                    sha=$(echo ${git_desc} | cut -f 3 -d "-")
                    export GIT_SHA=${sha:1}

                    cd -

                    export PATH=$PATH:/usr/bin:/usr/local/bin

                    python3 $WORKSPACE/llvm-zorg/zorg/jenkins/monorepo_build.py lldb-cmake-xcode build \
                      --assertions \
                      --cmake-type=Release
                    '''
                }
            }
        }
        stage('Xcode Standalone Test (build tree)') {
            steps {
                timeout(30) {
                    sh '''
                    set -u
                    export PATH=$PATH:/usr/bin:/usr/local/bin

                    echo "TEMPORARILY DISABLED (runs with too many jobs in parallel)" python3 $WORKSPACE/llvm-zorg/zorg/jenkins/monorepo_build.py lldb-cmake-xcode test \
                      --assertions \
                      --cmake-type=Release
                    '''
                }
            }
        }
    }
    post {
        changed {
            emailext subject: '$DEFAULT_SUBJECT',
                    presendScript: '$DEFAULT_PRESEND_SCRIPT',
                    postsendScript: '$DEFAULT_POSTSEND_SCRIPT',
                    recipientProviders: [
                            [$class: 'CulpritsRecipientProvider'],
                            [$class: 'DevelopersRecipientProvider'],
                            [$class: 'RequesterRecipientProvider'],
                    ],
                    replyTo: '$DEFAULT_REPLYTO',
                    to: '$DEFAULT_RECIPIENTS',
                    body:'$DEFAULT_CONTENT'
        }
    }
}
