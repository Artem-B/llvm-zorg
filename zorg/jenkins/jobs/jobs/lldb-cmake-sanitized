#!/usr/bin/env groovy
pipeline {
    agent { label 'green-dragon-04' }
    parameters {
        string(name: 'GIT_SHA', defaultValue: '*/main', description: 'Git revision to build')
        string(name: 'ARTIFACT', defaultValue: 'clang-stage2-Rthinlto/latest', description: 'Compiler artifact to use for building the project')
        string(name: 'BUILD_TYPE', defaultValue: 'Release', description: 'Default CMake build type; one of: Release, Debug, ...')
        string(name: 'CLEAN', defaultValue: "false", description: 'Whether or not to clean the build directory before building')
    }
    stages {
        stage('Checkout') {
            steps {
                timeout(30) {
                    dir('llvm-project') {
                        checkout([$class: 'GitSCM', branches: [
                            [name: params.GIT_SHA]
                        ], userRemoteConfigs: [
                            [url: 'https://github.com/llvm/llvm-project.git']
                        ], extensions: [
                            [$class: 'CloneOption',
                            reference: '/Users/Shared/llvm-project.git',
                            noTags: true, timeout: 30]
                        ]])
                    }
                    dir('llvm-zorg') {
                        checkout([$class: 'GitSCM', branches: [
                            [name: '*/main']
                        ], userRemoteConfigs: [
                            [url: 'https://github.com/llvm/llvm-zorg.git']
                        ], extensions: [
                            [$class: 'CloneOption',
                            reference: '/Users/Shared/llvm-zorg.git']
                        ]])
                    }
                }
            }
        }
        stage('Fetch Host Compiler') {
        steps {
            timeout(10) {
                    sh '''
                    # The relay job sets ARTIFACT to the last good LLDB build.
                    # Here we use it to download the last good Clang.
                    export ARTIFACT=clang-stage2-Rthinlto/latest
                    python3 llvm-zorg/zorg/jenkins/monorepo_build.py fetch
                    '''
                }
            }
        }
        stage('Build') {
            steps {
                timeout(120) {
                    sh '''
                    set -u
                    rm -rf build.properties

                    cd llvm-project
                    git tag -a -m "First Commit" first_commit 97724f18c79c7cc81ced24239eb5e883bf1398ef || true

                    git_desc=$(git describe --match "first_commit")

                    export GIT_DISTANCE=$(echo ${git_desc} | cut -f 2 -d "-")

                    sha=$(echo ${git_desc} | cut -f 3 -d "-")
                    export GIT_SHA=${sha:1}

                    cd -

                    export PATH=$PATH:/usr/bin:/usr/local/bin

                    if test -f /opt/codesign-workaround.sh; then sh /opt/codesign-workaround.sh init lldb-build/bin/debugserver; fi
                    # Running too many asanified threads is too stressful for the kernel and we get >90% system time.
                    export MAX_PARALLEL_TESTS=$(sysctl hw.physicalcpu |awk '{print int(($2+1)/2)}')

                    python3 llvm-zorg/zorg/jenkins/monorepo_build.py lldb-cmake-sanitized build \
                      --assertions \
                      --projects="clang;lld;lldb"  \
                      --runtimes="libcxx;libcxxabi" \
                      --cmake-type=Release

                    if test -f /opt/codesign-workaround.sh; then sh /opt/codesign-workaround.sh sign lldb-build/bin/debugserver; fi
                    '''
                }
            }
        }
        stage('Test') {
            steps {
                timeout(120) {
                    sh '''
                    set -u
                    export PATH=$PATH:/usr/bin:/usr/local/bin

                    rm -rf test/results.xml

                    python3 llvm-zorg/zorg/jenkins/monorepo_build.py lldb-cmake-sanitized test
                    '''
                }
            }
        }
    }

    post {
        always {
            scanForIssues tool: clang()
            junit 'test/results.xml'
        }
    }
}
